*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="deskalert.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cntbutton AS container 		&& Base class for the 'buttons' on the Alert form.
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgImage" UniqueID="" Timestamp="" />

	#INCLUDE "vfpalert.h"
	*<DefinedPropArrayMethod>
		*m: onclick
	*</DefinedPropArrayMethod>

	BackColor = 192,192,192
	BackStyle = 0
	BorderColor = 128,128,128
	BorderWidth = 0
	Height = 15
	MousePointer = 15
	Name = "cntbutton"
	Width = 15

	ADD OBJECT 'imgImage' AS image WITH ;
		BackStyle = 0, ;
		Height = 11, ;
		Left = 2, ;
		MousePointer = 15, ;
		Name = "imgImage", ;
		Top = 2, ;
		Width = 11
		*< END OBJECT: BaseClass="image" />
	
	PROCEDURE Click
		This.OnClick()
	ENDPROC

	PROCEDURE Init
		** We always want the button background to 
		** match the Alert form's BackColor, and we
		** want all 'objects' on the button to have
		** the same ToolTipText.
		
		WITH THIS
			.BackColor = ThisForm.BackColor
			.SetAll("ToolTiptext",.ToolTipText)
		ENDWITH	
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		** Change the BackColor, add a border, and 
		** make the BackStyle "Opaque"
		
		WITH THIS
			.BackColor = RGB(177,177,177)
			.BorderColor = RGB(0,0,0)
			.BackStyle = 1
		ENDWITH	
		
	ENDPROC

	PROCEDURE MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		** Change the BackColor, add a border, and 
		** make the BackStyle "Opaque"
		
		WITH THIS
			.BackColor = RGB(192,192,192)
			.BorderWidth = 1
			.BackStyle = 1
		ENDWITH
		
	ENDPROC

	PROCEDURE MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		** Reset the BaclColor and Border, and 
		** make the BackStyle "Transparent".
		
		WITH THIS
			.BackColor = ThisForm.BackColor
			.BorderWidth = 0
			.BackStyle = 0
		ENDWITH
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		WITH THIS
			.BackColor = RGB(192,192,192)
			.BorderColor = RGB(128,128,128)
			.BackStyle = 0
		ENDWITH	
	ENDPROC

	PROCEDURE onclick
		** Abstract method for the button's "Clicks"
	ENDPROC

	PROCEDURE imgImage.Click
		This.Parent.OnClick()
	ENDPROC

	PROCEDURE imgImage.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseDown()
		
	ENDPROC

	PROCEDURE imgImage.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseEnter()
	ENDPROC

	PROCEDURE imgImage.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseLeave()
	ENDPROC

	PROCEDURE imgImage.MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseUp()
	ENDPROC

ENDDEFINE

DEFINE CLASS cntbuttonclose AS cntbutton OF "deskalert.vcx" 		&& Close button on the Alert form
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "vfpalert.h"
	Name = "cntbuttonclose"
	ToolTipText = "Click here to close this alert"
	imgImage.Height = 11
	imgImage.Left = 2
	imgImage.Name = "imgImage"
	imgImage.Picture = close.bmp
	imgImage.Top = 2
	imgImage.Width = 11

ENDDEFINE

DEFINE CLASS cntbuttonpin AS cntbutton OF "deskalert.vcx" 		&& Push-pin on the Alert form
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: lpinned_assign
		*p: lpinned
	*</DefinedPropArrayMethod>

	Height = 16
	lpinned = .F.
	Name = "cntbuttonpin"
	Width = 16
	imgImage.Height = 12
	imgImage.Name = "imgImage"
	imgImage.Picture = pin2.bmp
	imgImage.Width = 12
	
	PROCEDURE lpinned_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		DODEFAULT()
		
		This.lPinned = !This.lPinned
		
	ENDPROC

	PROCEDURE MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		IF !This.lPinned
			DODEFAULT()
		ENDIF	
	ENDPROC

ENDDEFINE

DEFINE CLASS cntbuttonsettings AS cntbutton OF "deskalert.vcx" 		&& Settings button on the Alert form
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "vfpalert.h"
	Name = "cntbuttonsettings"
	ToolTipText = "Click here to configure Desktop Alerts"
	Visible = .T.
	imgImage.Height = 11
	imgImage.Name = "imgImage"
	imgImage.Picture = settings.bmp
	imgImage.Width = 11

ENDDEFINE

DEFINE CLASS cnttaskbutton AS cntbutton OF "deskalert.vcx" 		&& 'Task' button class
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 18
	Name = "cnttaskbutton"
	Visible = .F.
	Width = 18
	IMGIMAGE.Height = 16
	IMGIMAGE.Left = 1
	IMGIMAGE.Name = "IMGIMAGE"
	IMGIMAGE.Picture = default_task.png
	IMGIMAGE.Stretch = 2
	IMGIMAGE.Top = 1
	IMGIMAGE.Width = 16

ENDDEFINE

DEFINE CLASS frmalert AS form 		&& Actual Alert form which appears on the user's screen
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cntClose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntSettings" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTitle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSubject" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDetails" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntTask1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntTask2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgTitleBar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="tmrFader" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="tmrWait" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntPin" UniqueID="" Timestamp="" />

	#INCLUDE "vfpalert.h"
	*<DefinedPropArrayMethod>
		*m: alertresult
		*m: getscreenheight
		*m: getscreenwidth
		*m: hideform
		*m: lcanfade_assign
		*m: nresult_assign
		*m: renderform
		*m: setposition
		*m: startwait
		*p: lcanfade		&& If Windows 98, .F., otherwise .T.
		*p: lfading		&& Specifies that the form is "fading away".
		*p: nfadefactor
		*p: nresult
		*p: nscreenheight
		*p: nscreenwidth
		*p: nstatus
		*p: ntransparency
		*p: oparams
		*p: oparent
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	BackColor = 235,233,237
	BorderStyle = 3
	Caption = "DESKALERT"
	ControlBox = .F.
	DoCreate = .T.
	HalfHeightCaption = .F.
	Height = 69
	Icon = vfpalert.ico
	lcanfade = .F.		&& If Windows 98, .F., otherwise .T.
	Left = 3
	lfading = .F.		&& Specifies that the form is "fading away".
	MaxButton = .F.
	MinButton = .F.
	Name = "frmalert"
	nfadefactor = 0
	nresult = -1
	nscreenheight = 0
	nscreenwidth = 0
	nstatus = -1
	ntransparency = 0
	oparams = .NULL.
	oparent = 0
	ShowInTaskBar = .F.
	ShowTips = .T.
	ShowWindow = 2
	Themes = .T.
	TitleBar = 0
	Top = 3
	Width = 321

	ADD OBJECT 'cntClose' AS cntbuttonclose WITH ;
		Left = 304, ;
		Name = "cntClose", ;
		Top = 11, ;
		imgImage.Height = 11, ;
		imgImage.Name = "imgImage", ;
		imgImage.Width = 11
		*< END OBJECT: ClassLib="deskalert.vcx" BaseClass="container" />

	ADD OBJECT 'cntPin' AS cntbuttonpin WITH ;
		Left = 259, ;
		Name = "cntPin", ;
		Top = 10, ;
		imgImage.Height = 11, ;
		imgImage.Name = "imgImage", ;
		imgImage.Width = 13
		*< END OBJECT: ClassLib="deskalert.vcx" BaseClass="container" />

	ADD OBJECT 'cntSettings' AS cntbuttonsettings WITH ;
		Left = 282, ;
		Name = "cntSettings", ;
		Top = 11, ;
		imgImage.Height = 11, ;
		imgImage.Name = "imgImage", ;
		imgImage.Width = 11
		*< END OBJECT: ClassLib="deskalert.vcx" BaseClass="container" />

	ADD OBJECT 'cntTask1' AS cnttaskbutton WITH ;
		Left = 3, ;
		Name = "cntTask1", ;
		Top = 45, ;
		IMGIMAGE.Height = 16, ;
		IMGIMAGE.Name = "IMGIMAGE", ;
		IMGIMAGE.Width = 16
		*< END OBJECT: ClassLib="deskalert.vcx" BaseClass="container" />

	ADD OBJECT 'cntTask2' AS cnttaskbutton WITH ;
		Left = 23, ;
		Name = "cntTask2", ;
		Top = 45, ;
		IMGIMAGE.Height = 16, ;
		IMGIMAGE.Name = "IMGIMAGE", ;
		IMGIMAGE.Width = 16
		*< END OBJECT: ClassLib="deskalert.vcx" BaseClass="container" />

	ADD OBJECT 'imgIcon' AS imgicon WITH ;
		Height = 32, ;
		Left = 5, ;
		Name = "imgIcon", ;
		Picture = default_icon.bmp, ;
		Top = 12, ;
		Visible = .T., ;
		Width = 32
		*< END OBJECT: ClassLib="deskalert.vcx" BaseClass="image" />

	ADD OBJECT 'imgTitleBar' AS imgtitlebar WITH ;
		Left = 0, ;
		Name = "imgTitleBar", ;
		Top = 0
		*< END OBJECT: ClassLib="deskalert.vcx" BaseClass="image" />

	ADD OBJECT 'lblDetails' AS lbldetails WITH ;
		Height = 30, ;
		Left = 46, ;
		Name = "lblDetails", ;
		Top = 40, ;
		Visible = .T., ;
		Width = 275
		*< END OBJECT: ClassLib="deskalert.vcx" BaseClass="label" />

	ADD OBJECT 'lblSubject' AS lblsubject WITH ;
		Height = 15, ;
		Left = 46, ;
		Name = "lblSubject", ;
		Top = 26, ;
		Visible = .T., ;
		Width = 275
		*< END OBJECT: ClassLib="deskalert.vcx" BaseClass="label" />

	ADD OBJECT 'lblTitle' AS lbltitle WITH ;
		Height = 15, ;
		Left = 45, ;
		Name = "lblTitle", ;
		Top = 12, ;
		Visible = .T., ;
		Width = 207
		*< END OBJECT: ClassLib="deskalert.vcx" BaseClass="label" />

	ADD OBJECT 'tmrFader' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 20, ;
		Left = 192, ;
		Name = "tmrFader", ;
		Top = 48, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'tmrWait' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Left = 240, ;
		Name = "tmrWait", ;
		Top = 48, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE alertresult
		LPARAMETERS tnResult AS Integer
		
		** Here we take the "result" (what the
		** user did with the Alert form) and 
		** pass it back to the Alert object 
		** which instantiated this form.
		
		** The Alert object has an nResult_Assign
		** method, which will call the "Alert Callback"
		** object's AlertResult() method.
		
		** Since we have the result, let's 
		** make the form start fading away.
		This.HideForm()
		
		
		
		
	ENDPROC

	PROCEDURE Destroy
		LOCAL loException AS Exception
		loException = .NULL.
		
		TRY
			This.oParent.nResult = This.nResult
		CATCH TO loException
		ENDTRY
	ENDPROC

	PROCEDURE getscreenheight
		** Returns the height of the physical screen, taking account of the taskbar, if visible.
		** Assumes SystemParametersInfo API function has been declared.
		
		** Thanks to Mike Lewis' FoxPro Advisor article.
		
		LOCAL lcBuffer, lcDWord
		
		lcBuffer = SPACE(16)
		_SystemParametersInfo(48, 0, @lcBuffer, 0)
		
		lcDWord = SUBSTR(lcBuffer, 13, 4)
		
		RETURN ASC(SUBSTR(lcDWord, 1,1)) + ;
			BITLSHIFT(ASC(SUBSTR(lcDWord, 2,1)),  8) +;
			BITLSHIFT(ASC(SUBSTR(lcDWord, 3,1)), 16) +;
			BITLSHIFT(ASC(SUBSTR(lcDWord, 4,1)), 24)
		
	ENDPROC

	PROCEDURE getscreenwidth
		** Returns the width of the physical screen, taking account of the taskbar, if visible.
		** Assumes SystemParametersInfo API function has been declared.
		
		** Thanks to Mike Lewis' FoxPro Advisor article.
		
		LOCAL lcBuffer AS String, lcDWord AS String
		lcBuffer = SPACE(16)
		
		_SystemParametersInfo(48, 0, @lcBuffer, 0)
		
		lcDWord = SUBSTR(lcBuffer, 9, 4)
		
		RETURN ASC(SUBSTR(lcDWord, 1,1)) + ;
			BITLSHIFT(ASC(SUBSTR(lcDWord, 2,1)),  8) +;
			BITLSHIFT(ASC(SUBSTR(lcDWord, 3,1)), 16) +;
			BITLSHIFT(ASC(SUBSTR(lcDWord, 4,1)), 24)
		
	ENDPROC

	PROCEDURE hideform
		This.nStatus = 0
		This.tmrFader.Enabled = .T.
	ENDPROC

	PROCEDURE Init
		LPARAMETERS toParams AS Variant, toParent AS Object
		  
		** toParent is the Alert object which instantiated
		** this instance of frmAlert
		
		** toParams is the Parameter object created by the
		** toParent when the Alert() method was called.
		  
		WITH THIS
			.oParent = toParent
			.oParams = toParams
			
			.Name = ALLTRIM(.oParams.Name)
		
			** We're going to force the BorderStyle and 
			** TitleBar properties.
			.BorderStyle = 2
			.TitleBar = 0
			
			** Now we're going to figure out "where" on 
			** the screen to place the Alert.
			.SetPosition()
			
			** Move, size, set visible status, based
			** on the parameters passed
			.RenderForm()
					
			** Are we running Windows 2000 or higher?
			** If yes, we can spice this form up a bit,
			** by allowing it to Fade In/Out.
			.lCanFade = (VAL(OS(3))>=5)
			
			** Force he BorderStyle again, this time
			** giving it a Single border.
			.BorderStyle = 1
			
			** Make the form visible. If Win98, it will
			** simply appear on the screen as normal.
			** For Win2K and higher, we have already made
			** the form completely transparent, so even
			** though it's "Visible", it's not...
			.Visible = .T.
			
			** Calculate the number of seconds the
			** Alert should remain on screen.
			.tmrWait.Interval = (.oParent.nWait * 1000)
			
			** Start the Show Timer, which causes the 
			** form to appear gradually with API calls.
			.nFadeFactor = 255/(1000/DA_FADETIMER)
		
			** Note: This is skipped on Win98.
			IF .lCanFade
				** Set the form status to "Appearing"
				.nStatus = 1
				
				** Start the 'fading' timer
				.tmrFader.Enabled = .T.
			ENDIF	
		
			** Play the sound associated with the Alerts.
			IF .oParent.lSound
				SET BELL TO DA_DEFAULTSOUND
				?CHR(7)
			ENDIF	
		ENDWITH
	ENDPROC

	PROCEDURE lcanfade_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.lCanFade = m.vNewVal
		
		IF This.lCanFade
			** The SetWindowLong tells the system
			** to make this form a "layered window". See the "Transparent Forms"
			** solution sample in VFP for the 'code'.
			** http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnwui/html/layerwin.asp
			** for more info on Layered Windows
			_SetWindowLong(This.hWnd, -20, 0x00080000)
			
			** SetLayeredWindowAttributes 
			_SetLayeredWindowAttributes(This.hWnd, 0, 0, 2)	
		ENDIF
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		** This Event will handle "moving" the Alert
		** form, since we have no TitleBar.
		
		IF nButton = 1 
			LOCAL hWindow 
		    hWindow = GetFocus() 
		
		    = ReleaseCapture() 
		    = SendMessage(hWindow, WM_SYSCOMMAND, MOUSE_MOVE, WM_NULL) 
		    = SendMessage(hWindow, WM_LBUTTONUP, 0, 0) 
		ENDIF 
	ENDPROC

	PROCEDURE nresult_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.nResult = m.vNewVal
		
		IF This.nResult # 0
			RAISEEVENT(This,"AlertResult",This.nResult)
		ENDIF	
		
	ENDPROC

	PROCEDURE renderform
		WITH THISFORM
			** Set up the ICON
			DO CASE
				CASE .oParams.Icon = DA_ICONDEFAULT			&& 0
					.imgIcon.Picture = "default_icon.bmp"
				CASE .oParams.Icon = DA_ICONSTOP			&& 16
					.imgIcon.Picture = "stop.png"
				CASE .oParams.Icon = DA_ICONQUESTION		&& 32
					.imgIcon.Picture = "question.png"
				CASE .oParams.Icon = DA_ICONEXCLAMATION		&& 48
					.imgIcon.Picture = "exclamation.png"
				CASE .oParams.Icon = DA_ICONINFORMATION		&& 64
					.imgIcon.Picture = "info.png"
				CASE .oParams.Icon = DA_ICONCUSTOM			&& 128
					IF FILE(.oParams.IconFile)
						.imgIcon.Picture = .oParams.IconFile
					ELSE
						.imgIcon.Picture = "default_icon.bmp"
					ENDIF	
				OTHERWISE
					.imgIcon.Visible = .F.
			ENDCASE
			
			** TITLE
			lcTitle = ALLTRIM(.oParams.Title)
			IF !EMPTY(lcTitle)
				IF LEN(lcTitle) > 28
					lcTitle = SUBSTR(lcTitle,1,24) + "..."
				ENDIF	
				.lblTitle.Caption = lcTitle
			ELSE
				.lblTitle.Caption = "Desktop Alert Message"
			ENDIF
			
			** SUBJECT
			lcSubject = ALLTRIM(.oParams.Subject)
			IF !EMPTY(lcSubject)
				IF LEN(lcSubject) > 48
					lcSubject = SUBSTR(lcSubject,1,45) + "..."
				ENDIF
				.lblSubject.Caption = lcSubject
				.lblSubject.AutoSize = .T.
			ELSE
				.lblSubject.Visible = .F.	
				.lblDetails.Top = .lblDetails.Top - 10
			ENDIF
		
			** DETAILS
			lcDetails = ALLTRIM(.oParams.AlertText)
			IF !EMPTY(lcDetails)
				IF LEN(lcDetails) > 100
					lcDetails = SUBSTR(lcDetails,1,115) + "..."
				ENDIF	
				.lblDetails.Caption = lcDetails
				.lblDetails.AutoSize = .T.
			ELSE
				.lblDetails.Visible = .F.	
			ENDIF
			
			IF INLIST(.oParams.Type, DA_TYPELINK, DA_TYPETASK + 1, DA_TYPEMULTI + 1)
				** lblDetails lIsALink has an Assign method...
				.lblDetails.lIsALink = .T.
			ENDIF	
				
			.cntClose.Visible = ! .oParams.HideClose
			IF !.cntClose.Visible
				** Move Settings and PushPin to the right
				.cntPin.Left = .cntSettings.Left
				.cntSettings.Left = .cntClose.Left
			ENDIF	
		
			.cntSettings.Visible = ! .oParams.HideSettings	
			IF !.cntSettings.Visible
				** Move the Push-Pin to the right.
				.cntPin.Left = .cntSettings.Left
			ENDIF
			
			.cntPin.Visible = ! .oParams.HidePin
				
			** TASK ONE
			IF PEMSTATUS(.oParams,"Task1",5)
				lcTask1 = ALLTRIM(.oParams.Task1)
				IF !EMPTY(lcTask1)
					lcTask1Icon = ALLTRIM(.oParams.Task1Icon)
					IF !EMPTY(lcTask1Icon)
						IF FILE(lcTask1Icon)
							.cntTask1.imgImage.Picture = lcTask1Icon
						ELSE
							.cntTask1.imgImage.Picture = DA_DEFAULTTASKFILE
						ENDIF			
					ELSE
						.cntTask1.imgImage.Picture = DA_DEFAULTTASKFILE
					ENDIF
					.cntTask1.Visible = .T.
					.cntTask1.ToolTipText = ALLTRIM(lcTask1)
					.cntTask1.imgImage.ToolTipText = ALLTRIM(lcTask1)
				ELSE
					.cntTask1.Visible = .F.	
				ENDIF
			ELSE
				.cntTask1.Visible = .F.	
			ENDIF
				
			** TASK TWO
			IF PEMSTATUS(.oParams,"Task2",5)
				lcTask2 = ALLTRIM(.oParams.Task2)
				IF !EMPTY(lcTask2)
					lcTask2Icon = ALLTRIM(.oParams.Task2Icon)
					IF !EMPTY(lcTask2Icon)
						IF FILE(lcTask2Icon)
							.cntTask2.imgImage.Picture = lcTask2Icon
						ELSE
							.cntTask2.imgImage.Picture = DA_DEFAULTTASKFILE
						ENDIF			
					ELSE
						.cntTask2.imgImage.Picture = DA_DEFAULTTASKFILE
					ENDIF
					.cntTask2.Visible = .T.
					.cntTask2.ToolTipText = ALLTRIM(lcTask2)
					.cntTask2.imgImage.ToolTipText = ALLTRIM(lcTask2)
				ELSE
					.cntTask2.Visible = .F.	
				ENDIF
			ELSE
				.cntTask2.Visible = .F.	
			ENDIF
		ENDWITH	
						
		
	ENDPROC

	PROCEDURE setposition
		** This method will find any open alerts on the screen,
		** in order to find out 'where' on the screen this form should appear.
		** This code works fine until alerts start disappearing.
		
		LOCAL lnMaxRows AS Integer, lnMaxCols AS Integer, ;
			  lnMaxAlerts AS Integer, lnAlerts AS Integer, ;
			  lnRow AS Integer, lnCol AS Integer
		
		WITH THIS
			** First, we'll find out the screen height
			** and screen width, taking into account the
			** Windows TaskBar.
			.nScreenHeight = .GetScreenHeight()
			.nScreenWidth = .GetScreenWidth()
			
			** Initial position of form (bottom right corner)
			.Top = .nScreenHeight - .Height - 50
			.Left = .nScreenWidth - .Width - 50
			
			** How many of these alerts 'could' fit on the screen?
			lnMaxRows = INT(.nScreenHeight/100)		&& Maximum Rows
			lnMaxCols = INT(.nScreenWidth/350)		&& Maximum Columns
			
			lnMaxAlerts = lnMaxRows*lnMaxCols		&& Maximum # of Alerts
			
			** Find any other alerts currently active
			lnAlerts = VFPFindWindow()
				
			lnRow = MOD(lnAlerts,lnMaxRows)
			lnCol = INT(lnAlerts/lnMaxRows)
			
			IF lnRow = 0
				IF lnAlerts > lnMaxRows
					.Top = .nScreenHeight - (100*lnRow)
					lnCol = lnCol + 1
				ELSE
					** It's at the top
					.Top = .nScreenHeight - (100*lnMaxRows)
				ENDIF	
			ELSE
				.Top = .nScreenHeight - (100*lnRow)
				lnCol = lnCol + 1
			ENDIF
			
			.Left = .nScreenWidth - (350 * lnCol)
		ENDWITH
	ENDPROC

	PROCEDURE startwait
		This.tmrWait.Enabled = .T.
	ENDPROC

	PROCEDURE cntClose.onclick
		ThisForm.nResult = DA_CLOSED
	ENDPROC

	PROCEDURE cntPin.lpinned_assign
		LPARAMETERS vNewVal
		THIS.lPinned = m.vNewVal
		
		WITH THIS
			IF .lPinned
				.imgImage.Picture = "pin.bmp"
				.SpecialEffect = 1
				.BorderWidth = 1
				.BorderColor = RGB(128,128,128)
			ELSE
				.imgImage.Picture = "pin2.bmp"
				.SpecialEffect = 2
			ENDIF
			ThisForm.tmrWait.Enabled = !.lPinned
		ENDWITH			
		
			
	ENDPROC

	PROCEDURE cntSettings.onclick
		ThisForm.oParent.oMgr.ShowSettings(.T.,THISFORM)
		ThisForm.tmrWait.Enabled = .F.
	ENDPROC

	PROCEDURE cntTask1.onclick
		ThisForm.nResult = DA_TASKONE
	ENDPROC

	PROCEDURE cntTask2.onclick
		ThisForm.nResult = DA_TASKTWO
	ENDPROC

	PROCEDURE lblDetails.onclick
		ThisForm.nResult = DA_LINK
	ENDPROC

	PROCEDURE tmrFader.Timer
		WITH THISFORM	
			DO CASE 
				CASE .nStatus = 0	&& Disappearing
		
					** The form is "fading away", so we decrease the
					** "opaqueness" of the form.
		
					.nTransparency = .nTransparency - .nFadeFactor
					_SetLayeredWindowAttributes(.hWnd, 0, .nTransparency, 2)
					
					IF .nTransparency <= 1
		
						** Turn off the timer, and RELEASE the form
						This.Enabled = .F.
						.Release()
		
					ENDIF	
				CASE .nStatus = 1	&& Appearing
		
					** When fading-in, we want to increase the
					** opaqueness of the form.
		
					.nTransparency = .nTransparency  + .nFadeFactor
					_SetLayeredWindowAttributes(.hWnd, 0, .nTransparency, 2)
					
					IF .nTransparency >= 255 * ((100 - .oParent.nPercent)/100)
		
						** Turn off this timer, and start the Wait timer
						This.Enabled = .F.
						.tmrWait.Enabled = .T.
		
					ENDIF	
			ENDCASE	
		ENDWITH
	ENDPROC

	PROCEDURE tmrWait.Init
		This.Interval = DA_FADETIMER
	ENDPROC

	PROCEDURE tmrWait.Timer
		This.Enabled = .F.
		ThisForm.nResult = DA_NOACTION
		ThisForm.HideForm()
	ENDPROC

ENDDEFINE

DEFINE CLASS imgicon AS image 		&& Large icon for the Alert form
 	*< CLASSDATA: Baseclass="image" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "vfpalert.h"
	BackStyle = 0
	Height = 32
	Name = "imgicon"
	Picture = 
	Visible = .F.
	Width = 32
	
	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		ThisForm.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

ENDDEFINE

DEFINE CLASS imgtitlebar AS image 		&& Simple graphic to replace the form's TitleBar
 	*< CLASSDATA: Baseclass="image" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 7
	Name = "imgtitlebar"
	Picture = titlebar.png
	Stretch = 2
	Width = 327
	
	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		ThisForm.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

ENDDEFINE

DEFINE CLASS lbldetails AS label 		&& The 'message' on the Alert form
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "vfpalert.h"
	*<DefinedPropArrayMethod>
		*m: lisalink_assign
		*m: onclick
		*p: lisalink
	*</DefinedPropArrayMethod>

	BackStyle = 0
	Caption = "lblDetails"
	FontName = "Tahoma"
	FontSize = 8
	Height = 30
	lisalink = .F.
	Name = "lbldetails"
	Visible = .F.
	Width = 250
	WordWrap = .T.
	
	PROCEDURE Click
		WITH THIS
			IF .lIsALink
				.OnClick()
			ENDIF	
		ENDWITH	
	ENDPROC

	PROCEDURE lisalink_assign
		LPARAMETERS vNewVal
		*To do: Modify this routine for the Assign method
		THIS.lIsALink = m.vNewVal
		
		WITH THIS
			IF .lIsALink
				.ForeColor = RGB(0,0,255)
				.MousePointer = 15 
			ELSE
				.ForeColor = RGB(0,0,0)
				.MousePointer = 0 
			ENDIF	
		ENDWITH	
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		WITH THIS
			IF .lIsALink
				.FontUnderline = .T.
			ELSE
				ThisForm.MouseDown(nButton, nShift, nXCoord, nYCoord)		
			ENDIF	
		ENDWITH	
		
		
	ENDPROC

	PROCEDURE MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		WITH THIS
			IF .lIsALink
				.FontUnderline = .T.
			ENDIF	
		ENDWITH	
		
	ENDPROC

	PROCEDURE MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		WITH THIS
			IF .lIsALink
				.FontUnderline = .F.
			ENDIF	
		ENDWITH	
		
	ENDPROC

	PROCEDURE MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		WITH THIS
			IF .lIsALink
				.FontUnderline = .T.
			ENDIF	
		ENDWITH	
		
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		WITH THIS
			IF .lIsALink
				.FontUnderline = .F.
			ENDIF	
		ENDWITH	
	ENDPROC

	PROCEDURE onclick
	ENDPROC

ENDDEFINE

DEFINE CLASS lblsubject AS label 		&& The 'subject' line on the Alert form
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "vfpalert.h"
	BackStyle = 0
	Caption = "lblSubject"
	FontName = "Tahoma"
	FontSize = 8
	Height = 15
	Name = "lblsubject"
	Visible = .F.
	Width = 250
	
	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		ThisForm.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

ENDDEFINE

DEFINE CLASS lbltitle AS label 		&& The 'title' on the Alert form
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "vfpalert.h"
	AutoSize = .F.
	BackStyle = 0
	Caption = "lblTitle"
	FontBold = .T.
	FontName = "Tahoma"
	FontSize = 8
	Height = 15
	Name = "lbltitle"
	Visible = .F.
	Width = 250
	
	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		ThisForm.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

ENDDEFINE
